// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "SalaryAdvance/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CustomerRepository is an autogenerated mock type for the CustomerRepository type
type CustomerRepository struct {
	mock.Mock
}

// CheckDuplicateInValidCustomers provides a mock function with given fields: ctx, name, accountNo
func (_m *CustomerRepository) CheckDuplicateInValidCustomers(ctx context.Context, name string, accountNo string) (*domain.Customer, error) {
	ret := _m.Called(ctx, name, accountNo)

	if len(ret) == 0 {
		panic("no return value specified for CheckDuplicateInValidCustomers")
	}

	var r0 *domain.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Customer, error)); ok {
		return rf(ctx, name, accountNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.Customer); ok {
		r0 = rf(ctx, name, accountNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, accountNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, customer
func (_m *CustomerRepository) Create(ctx context.Context, customer *domain.Customer) (*domain.Customer, error) {
	ret := _m.Called(ctx, customer)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Customer) (*domain.Customer, error)); ok {
		return rf(ctx, customer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Customer) *domain.Customer); ok {
		r0 = rf(ctx, customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Customer) error); ok {
		r1 = rf(ctx, customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransaction provides a mock function with given fields: ctx, transaction
func (_m *CustomerRepository) CreateTransaction(ctx context.Context, transaction *domain.Transaction) (*domain.Transaction, error) {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 *domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Transaction) (*domain.Transaction, error)); ok {
		return rf(ctx, transaction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Transaction) *domain.Transaction); ok {
		r0 = rf(ctx, transaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Transaction) error); ok {
		r1 = rf(ctx, transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx
func (_m *CustomerRepository) FindAll(ctx context.Context) ([]*domain.Customer, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*domain.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.Customer, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Customer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *CustomerRepository) FindByID(ctx context.Context, id string) (*domain.Customer, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *domain.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Customer, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Customer); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByNameAndAccountNo provides a mock function with given fields: ctx, name, accountNo
func (_m *CustomerRepository) FindByNameAndAccountNo(ctx context.Context, name string, accountNo string) (*domain.Customer, error) {
	ret := _m.Called(ctx, name, accountNo)

	if len(ret) == 0 {
		panic("no return value specified for FindByNameAndAccountNo")
	}

	var r0 *domain.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Customer, error)); ok {
		return rf(ctx, name, accountNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.Customer); ok {
		r0 = rf(ctx, name, accountNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, accountNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *CustomerRepository) GetAll(ctx context.Context) ([]*domain.Customer, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*domain.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.Customer, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Customer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsByAccount provides a mock function with given fields: ctx, accountNo
func (_m *CustomerRepository) GetTransactionsByAccount(ctx context.Context, accountNo string) ([]*domain.Transaction, error) {
	ret := _m.Called(ctx, accountNo)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsByAccount")
	}

	var r0 []*domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.Transaction, error)); ok {
		return rf(ctx, accountNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Transaction); ok {
		r0 = rf(ctx, accountNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsByCustomerId provides a mock function with given fields: ctx, customerId
func (_m *CustomerRepository) GetTransactionsByCustomerId(ctx context.Context, customerId string) ([]*domain.Transaction, error) {
	ret := _m.Called(ctx, customerId)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsByCustomerId")
	}

	var r0 []*domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.Transaction, error)); ok {
		return rf(ctx, customerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Transaction); ok {
		r0 = rf(ctx, customerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasTransactions provides a mock function with given fields: ctx, accountNo
func (_m *CustomerRepository) HasTransactions(ctx context.Context, accountNo string) (bool, error) {
	ret := _m.Called(ctx, accountNo)

	if len(ret) == 0 {
		panic("no return value specified for HasTransactions")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, accountNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, accountNo)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, customer
func (_m *CustomerRepository) Update(ctx context.Context, customer *domain.Customer) (*domain.Customer, error) {
	ret := _m.Called(ctx, customer)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Customer) (*domain.Customer, error)); ok {
		return rf(ctx, customer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Customer) *domain.Customer); ok {
		r0 = rf(ctx, customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Customer) error); ok {
		r1 = rf(ctx, customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCustomerRepository creates a new instance of CustomerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerRepository {
	mock := &CustomerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
