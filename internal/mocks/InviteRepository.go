// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "SalaryAdvance/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// InviteRepository is an autogenerated mock type for the InviteRepository type
type InviteRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, invite
func (_m *InviteRepository) Create(ctx context.Context, invite *domain.Invite) (*domain.Invite, error) {
	ret := _m.Called(ctx, invite)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Invite
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Invite) (*domain.Invite, error)); ok {
		return rf(ctx, invite)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Invite) *domain.Invite); ok {
		r0 = rf(ctx, invite)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Invite)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Invite) error); ok {
		r1 = rf(ctx, invite)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByToken provides a mock function with given fields: ctx, token
func (_m *InviteRepository) FindByToken(ctx context.Context, token string) (*domain.Invite, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for FindByToken")
	}

	var r0 *domain.Invite
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Invite, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Invite); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Invite)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, invite
func (_m *InviteRepository) Update(ctx context.Context, invite *domain.Invite) (*domain.Invite, error) {
	ret := _m.Called(ctx, invite)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.Invite
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Invite) (*domain.Invite, error)); ok {
		return rf(ctx, invite)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Invite) *domain.Invite); ok {
		r0 = rf(ctx, invite)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Invite)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Invite) error); ok {
		r1 = rf(ctx, invite)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInviteRepository creates a new instance of InviteRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInviteRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *InviteRepository {
	mock := &InviteRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
